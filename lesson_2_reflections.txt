What happens when you initialize a repository? Why do you need to do it?

	Initializing a repository defines the HEAD or beginning of the commit history.
	Git has to know where the history begins.



How is the staging area different from the working directory and the repository?


	The staging area is different from the working directory and repository because it serves as an in-between
	or temporary directory that will be used to tell git how to proceed with specific operations on the specific
	files only in this specific directory.

What value do you think it offers?

	Requires the user to be very deliberate about their actions.

How can you use the staging area to make sure you have one commit per logical
change?


	By adding one document at a time.


What are some situations when branches would be helpful in keeping your history
organized? How would branches help?


	For major functionality changes, i.e., easy-mode, difficult-mode; for distinguishing versions that are stable
	and deployable versus experimental and untested, debugging, etc.


How do the diagrams help you visualize the branch structure?

	Diagrams are useful to making the commit history visual.

What is the result of merging two branches together?

	A new Master commit node.

Why do we represent it in the diagram the way we do?

	Because it is what it is: the combination of two branches.

What are the pros and cons of Git's automatic merging vs. always doing merges
manually?

	If commits are manual the history will correspond more with what the coder remembers during code development.
	Less so if the commits are automatic.
